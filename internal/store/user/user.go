package user

import (
	"context"
	"errors"
	"fmt"

	"github.com/jackc/pgx/v5"
	"go.uber.org/fx"
	"go.uber.org/zap"

	"github.com/dontagr/loyalty/internal/faultTolerance/pgretry"
	"github.com/dontagr/loyalty/internal/store/models"
)

const (
	searchUserSQL          = `SELECT id, login, password, balance FROM public.user WHERE login=$1`
	searchUserForUpdateSQL = `SELECT id, login, password, balance FROM public.user WHERE login=$1 FOR UPDATE`
	insertUserSQL          = `INSERT INTO public.user (login, password) VALUES ($1, $2);`
	createUserTable        = `
CREATE TABLE IF NOT EXISTS public."user" (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	login varchar(255) not null,
	password VARCHAR(255) not null,
    balance bigint NOT NULL DEFAULT 0,
	CONSTRAINT user_login UNIQUE ("login"),
	CONSTRAINT user_pk PRIMARY KEY ("id")
);
`
)

type User struct {
	dbpool *pgretry.PgxRetry
	log    *zap.SugaredLogger
}

func NewUser(log *zap.SugaredLogger, dbpool *pgretry.PgxRetry, lc fx.Lifecycle) *User {
	user := User{
		dbpool: dbpool,
		log:    log,
	}

	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return user.addShema(ctx)
		},
	})

	return &user
}

func (u *User) addShema(ctx context.Context) error {
	_, err := u.dbpool.Exec(ctx, createUserTable)

	return err
}

func (u *User) GetUser(login string, params ...bool) (*models.User, error) {
	forUpdate := false
	if len(params) > 0 {
		forUpdate = params[0]
	}

	var user models.User
	var sql string
	if forUpdate {
		sql = searchUserForUpdateSQL
	} else {
		sql = searchUserSQL
	}
	err := u.dbpool.QueryRow(context.Background(), sql, login).Scan(
		&user.ID,
		&user.Login,
		&user.PasswordHash,
		&user.Balance,
	)
	if errors.Is(err, pgx.ErrNoRows) {
		return &models.User{}, nil
	}
	if err != nil {
		return nil, err
	}

	return &user, nil
}

func (u *User) SaveUser(login string, passwordHash string) error {
	_, err := u.dbpool.Exec(context.Background(), insertUserSQL, login, passwordHash)
	if err != nil {
		return fmt.Errorf("ошибка при сохранении пользователя: %w", err)
	}

	return nil
}
