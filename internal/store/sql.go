package store

import (
	"context"
	"sync"

	"go.uber.org/fx"
	"go.uber.org/zap"

	"github.com/dontagr/loyalty/internal/faultTolerance/pgretry"
)

const (
	createTable = `
CREATE TABLE IF NOT EXISTS public."user" (
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	login varchar(255) not null,
	password VARCHAR(255) not null,
    balance double precision NOT NULL DEFAULT 0,
	CONSTRAINT user_login UNIQUE ("login"),
	CONSTRAINT user_pk PRIMARY KEY ("id")
);

CREATE TABLE IF NOT EXISTS public."order" (
	id bigint NOT NULL,
	user_id bigint NOT NULL,
	accrual double precision DEFAULT NUll,
	status int2 DEFAULT 0 NOT NULL,
	create_dt timestamptz DEFAULT NOW() NOT NULL,
	CONSTRAINT order_pk PRIMARY KEY (id),
	CONSTRAINT order_id_idx UNIQUE (user_id,id)
);

CREATE TABLE IF NOT EXISTS public."withdrawal" (
	id bigint NOT NULL,
	user_id bigint NOT NULL,
	withdrawal double precision DEFAULT NUll,
	create_dt timestamptz DEFAULT NOW() NOT NULL,
	CONSTRAINT withdrawal_pk PRIMARY KEY (id),
	CONSTRAINT withdrawal_id_idx UNIQUE (user_id,id)
);
`
)

type PG struct {
	userMX  sync.RWMutex
	orderMX sync.RWMutex
	dbpool  *pgretry.PgxRetry
	name    string
	log     *zap.SugaredLogger
}

func RegisterStorePG(log *zap.SugaredLogger, dbpool *pgretry.PgxRetry, lc fx.Lifecycle) *PG {
	pg := PG{
		dbpool: dbpool,
		log:    log,
	}

	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return pg.addShema(ctx)
		},
	})

	return &pg
}

func (pg *PG) addShema(ctx context.Context) error {
	_, err := pg.dbpool.Exec(ctx, createTable)

	return err
}
